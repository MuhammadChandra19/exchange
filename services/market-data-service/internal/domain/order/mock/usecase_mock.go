// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/muhammadchandra19/exchange/services/market-data-service/internal/infrastructure/questdb/order"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockUsecase) DeleteOrder(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockUsecaseMockRecorder) DeleteOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockUsecase)(nil).DeleteOrder), ctx, orderID)
}

// GetEventsByOrderID mocks base method.
func (m *MockUsecase) GetEventsByOrderID(ctx context.Context, orderID string) ([]*order.OrderEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]*order.OrderEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByOrderID indicates an expected call of GetEventsByOrderID.
func (mr *MockUsecaseMockRecorder) GetEventsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByOrderID", reflect.TypeOf((*MockUsecase)(nil).GetEventsByOrderID), ctx, orderID)
}

// GetOrder mocks base method.
func (m *MockUsecase) GetOrder(ctx context.Context, orderID string) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockUsecaseMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockUsecase)(nil).GetOrder), ctx, orderID)
}

// GetOrderBookSnapshot mocks base method.
func (m *MockUsecase) GetOrderBookSnapshot(ctx context.Context, symbol string, depth int) (*order.OrderBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBookSnapshot", ctx, symbol, depth)
	ret0, _ := ret[0].(*order.OrderBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderBookSnapshot indicates an expected call of GetOrderBookSnapshot.
func (mr *MockUsecaseMockRecorder) GetOrderBookSnapshot(ctx, symbol, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBookSnapshot", reflect.TypeOf((*MockUsecase)(nil).GetOrderBookSnapshot), ctx, symbol, depth)
}

// GetOrderByFilter mocks base method.
func (m *MockUsecase) GetOrderByFilter(ctx context.Context, filter order.OrderFilter) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByFilter", ctx, filter)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByFilter indicates an expected call of GetOrderByFilter.
func (mr *MockUsecaseMockRecorder) GetOrderByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByFilter", reflect.TypeOf((*MockUsecase)(nil).GetOrderByFilter), ctx, filter)
}

// GetPairActiveOrders mocks base method.
func (m *MockUsecase) GetPairActiveOrders(ctx context.Context, symbol, side string, limit, offset int) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairActiveOrders", ctx, symbol, side, limit, offset)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairActiveOrders indicates an expected call of GetPairActiveOrders.
func (mr *MockUsecaseMockRecorder) GetPairActiveOrders(ctx, symbol, side, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairActiveOrders", reflect.TypeOf((*MockUsecase)(nil).GetPairActiveOrders), ctx, symbol, side, limit, offset)
}

// StoreOrder mocks base method.
func (m *MockUsecase) StoreOrder(ctx context.Context, order *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrder indicates an expected call of StoreOrder.
func (mr *MockUsecaseMockRecorder) StoreOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrder", reflect.TypeOf((*MockUsecase)(nil).StoreOrder), ctx, order)
}

// StoreOrderEvent mocks base method.
func (m *MockUsecase) StoreOrderEvent(ctx context.Context, event *order.OrderEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrderEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrderEvent indicates an expected call of StoreOrderEvent.
func (mr *MockUsecaseMockRecorder) StoreOrderEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrderEvent", reflect.TypeOf((*MockUsecase)(nil).StoreOrderEvent), ctx, event)
}

// StoreOrderEvents mocks base method.
func (m *MockUsecase) StoreOrderEvents(ctx context.Context, events []*order.OrderEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrderEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrderEvents indicates an expected call of StoreOrderEvents.
func (mr *MockUsecaseMockRecorder) StoreOrderEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrderEvents", reflect.TypeOf((*MockUsecase)(nil).StoreOrderEvents), ctx, events)
}

// StoreOrders mocks base method.
func (m *MockUsecase) StoreOrders(ctx context.Context, orders []*order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrders", ctx, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrders indicates an expected call of StoreOrders.
func (mr *MockUsecaseMockRecorder) StoreOrders(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrders", reflect.TypeOf((*MockUsecase)(nil).StoreOrders), ctx, orders)
}

// UpdateOrder mocks base method.
func (m *MockUsecase) UpdateOrder(ctx context.Context, orderID string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, orderID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockUsecaseMockRecorder) UpdateOrder(ctx, orderID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockUsecase)(nil).UpdateOrder), ctx, orderID, updates)
}
