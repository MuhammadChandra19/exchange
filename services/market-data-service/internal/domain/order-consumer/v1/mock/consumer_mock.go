// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/muhammadchandra19/exchange/services/market-data-service/internal/domain/order-consumer/v1"
)

// MockOrderConsumer is a mock of OrderConsumer interface.
type MockOrderConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderConsumerMockRecorder
}

// MockOrderConsumerMockRecorder is the mock recorder for MockOrderConsumer.
type MockOrderConsumerMockRecorder struct {
	mock *MockOrderConsumer
}

// NewMockOrderConsumer creates a new mock instance.
func NewMockOrderConsumer(ctrl *gomock.Controller) *MockOrderConsumer {
	mock := &MockOrderConsumer{ctrl: ctrl}
	mock.recorder = &MockOrderConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderConsumer) EXPECT() *MockOrderConsumerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockOrderConsumer) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOrderConsumerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOrderConsumer)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockOrderConsumer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOrderConsumerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOrderConsumer)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockOrderConsumer) Subscribe(handler func(context.Context, *v1.RawOrderEvent) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockOrderConsumerMockRecorder) Subscribe(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockOrderConsumer)(nil).Subscribe), handler)
}
