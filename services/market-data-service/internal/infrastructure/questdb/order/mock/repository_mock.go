// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/muhammadchandra19/exchange/services/market-data-service/internal/infrastructure/questdb/order"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrderRepository) Delete(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderRepositoryMockRecorder) Delete(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderRepository)(nil).Delete), ctx, orderID)
}

// GetActiveOrdersBySymbol mocks base method.
func (m *MockOrderRepository) GetActiveOrdersBySymbol(ctx context.Context, symbol, side string, limit, offset int) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOrdersBySymbol", ctx, symbol, side, limit, offset)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOrdersBySymbol indicates an expected call of GetActiveOrdersBySymbol.
func (mr *MockOrderRepositoryMockRecorder) GetActiveOrdersBySymbol(ctx, symbol, side, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOrdersBySymbol", reflect.TypeOf((*MockOrderRepository)(nil).GetActiveOrdersBySymbol), ctx, symbol, side, limit, offset)
}

// GetByFilter mocks base method.
func (m *MockOrderRepository) GetByFilter(ctx context.Context, filter order.OrderFilter) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockOrderRepositoryMockRecorder) GetByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockOrderRepository)(nil).GetByFilter), ctx, filter)
}

// GetByID mocks base method.
func (m *MockOrderRepository) GetByID(ctx context.Context, orderID string) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, orderID)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryMockRecorder) GetByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepository)(nil).GetByID), ctx, orderID)
}

// GetEventsByOrderID mocks base method.
func (m *MockOrderRepository) GetEventsByOrderID(ctx context.Context, orderID string) ([]*order.OrderEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]*order.OrderEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByOrderID indicates an expected call of GetEventsByOrderID.
func (mr *MockOrderRepositoryMockRecorder) GetEventsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByOrderID", reflect.TypeOf((*MockOrderRepository)(nil).GetEventsByOrderID), ctx, orderID)
}

// GetOrderBookSnapshot mocks base method.
func (m *MockOrderRepository) GetOrderBookSnapshot(ctx context.Context, symbol string, depth int) (*order.OrderBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBookSnapshot", ctx, symbol, depth)
	ret0, _ := ret[0].(*order.OrderBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderBookSnapshot indicates an expected call of GetOrderBookSnapshot.
func (mr *MockOrderRepositoryMockRecorder) GetOrderBookSnapshot(ctx, symbol, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBookSnapshot", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderBookSnapshot), ctx, symbol, depth)
}

// Store mocks base method.
func (m *MockOrderRepository) Store(ctx context.Context, order *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockOrderRepositoryMockRecorder) Store(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOrderRepository)(nil).Store), ctx, order)
}

// StoreBatch mocks base method.
func (m *MockOrderRepository) StoreBatch(ctx context.Context, orders []*order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockOrderRepositoryMockRecorder) StoreBatch(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockOrderRepository)(nil).StoreBatch), ctx, orders)
}

// StoreEvent mocks base method.
func (m *MockOrderRepository) StoreEvent(ctx context.Context, event *order.OrderEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockOrderRepositoryMockRecorder) StoreEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockOrderRepository)(nil).StoreEvent), ctx, event)
}

// StoreEventBatch mocks base method.
func (m *MockOrderRepository) StoreEventBatch(ctx context.Context, events []*order.OrderEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEventBatch", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEventBatch indicates an expected call of StoreEventBatch.
func (mr *MockOrderRepositoryMockRecorder) StoreEventBatch(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEventBatch", reflect.TypeOf((*MockOrderRepository)(nil).StoreEventBatch), ctx, events)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(ctx context.Context, orderID string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, orderID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(ctx, orderID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), ctx, orderID, updates)
}
