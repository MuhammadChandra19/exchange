// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	tick "github.com/muhammadchandra19/exchange/services/market-data/internal/infrastructure/questdb/tick"
)

// MockTickRepository is a mock of TickRepository interface.
type MockTickRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTickRepositoryMockRecorder
}

// MockTickRepositoryMockRecorder is the mock recorder for MockTickRepository.
type MockTickRepositoryMockRecorder struct {
	mock *MockTickRepository
}

// NewMockTickRepository creates a new mock instance.
func NewMockTickRepository(ctrl *gomock.Controller) *MockTickRepository {
	mock := &MockTickRepository{ctrl: ctrl}
	mock.recorder = &MockTickRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickRepository) EXPECT() *MockTickRepositoryMockRecorder {
	return m.recorder
}

// GetByFilter mocks base method.
func (m *MockTickRepository) GetByFilter(ctx context.Context, filter tick.Filter) ([]*tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].([]*tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockTickRepositoryMockRecorder) GetByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockTickRepository)(nil).GetByFilter), ctx, filter)
}

// GetLatestBySymbol mocks base method.
func (m *MockTickRepository) GetLatestBySymbol(ctx context.Context, symbol string) (*tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBySymbol indicates an expected call of GetLatestBySymbol.
func (mr *MockTickRepositoryMockRecorder) GetLatestBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBySymbol", reflect.TypeOf((*MockTickRepository)(nil).GetLatestBySymbol), ctx, symbol)
}

// GetVolumeBySymbol mocks base method.
func (m *MockTickRepository) GetVolumeBySymbol(ctx context.Context, symbol string, from, to time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeBySymbol", ctx, symbol, from, to)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeBySymbol indicates an expected call of GetVolumeBySymbol.
func (mr *MockTickRepositoryMockRecorder) GetVolumeBySymbol(ctx, symbol, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeBySymbol", reflect.TypeOf((*MockTickRepository)(nil).GetVolumeBySymbol), ctx, symbol, from, to)
}

// Store mocks base method.
func (m *MockTickRepository) Store(ctx context.Context, tick *tick.Tick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, tick)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockTickRepositoryMockRecorder) Store(ctx, tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTickRepository)(nil).Store), ctx, tick)
}

// StoreBatch mocks base method.
func (m *MockTickRepository) StoreBatch(ctx context.Context, ticks []*tick.Tick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, ticks)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockTickRepositoryMockRecorder) StoreBatch(ctx, ticks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockTickRepository)(nil).StoreBatch), ctx, ticks)
}
