// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ohlc "github.com/muhammadchandra19/exchange/services/market-data/internal/infrastructure/questdb/ohlc"
)

// MockOHLCRepository is a mock of OHLCRepository interface.
type MockOHLCRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOHLCRepositoryMockRecorder
}

// MockOHLCRepositoryMockRecorder is the mock recorder for MockOHLCRepository.
type MockOHLCRepositoryMockRecorder struct {
	mock *MockOHLCRepository
}

// NewMockOHLCRepository creates a new mock instance.
func NewMockOHLCRepository(ctrl *gomock.Controller) *MockOHLCRepository {
	mock := &MockOHLCRepository{ctrl: ctrl}
	mock.recorder = &MockOHLCRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOHLCRepository) EXPECT() *MockOHLCRepositoryMockRecorder {
	return m.recorder
}

// GetByFilter mocks base method.
func (m *MockOHLCRepository) GetByFilter(ctx context.Context, filter ohlc.OHLCFilter) ([]*ohlc.OHLC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].([]*ohlc.OHLC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockOHLCRepositoryMockRecorder) GetByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockOHLCRepository)(nil).GetByFilter), ctx, filter)
}

// GetIntradayData mocks base method.
func (m *MockOHLCRepository) GetIntradayData(ctx context.Context, symbol, interval string, limit int) ([]*ohlc.OHLC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntradayData", ctx, symbol, interval, limit)
	ret0, _ := ret[0].([]*ohlc.OHLC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntradayData indicates an expected call of GetIntradayData.
func (mr *MockOHLCRepositoryMockRecorder) GetIntradayData(ctx, symbol, interval, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntradayData", reflect.TypeOf((*MockOHLCRepository)(nil).GetIntradayData), ctx, symbol, interval, limit)
}

// GetLatest mocks base method.
func (m *MockOHLCRepository) GetLatest(ctx context.Context, symbol, interval string) (*ohlc.OHLC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", ctx, symbol, interval)
	ret0, _ := ret[0].(*ohlc.OHLC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockOHLCRepositoryMockRecorder) GetLatest(ctx, symbol, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockOHLCRepository)(nil).GetLatest), ctx, symbol, interval)
}

// Store mocks base method.
func (m *MockOHLCRepository) Store(ctx context.Context, ohlc *ohlc.OHLC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, ohlc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockOHLCRepositoryMockRecorder) Store(ctx, ohlc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOHLCRepository)(nil).Store), ctx, ohlc)
}

// StoreBatch mocks base method.
func (m *MockOHLCRepository) StoreBatch(ctx context.Context, ohlcs []*ohlc.OHLC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, ohlcs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockOHLCRepositoryMockRecorder) StoreBatch(ctx, ohlcs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockOHLCRepository)(nil).StoreBatch), ctx, ohlcs)
}
