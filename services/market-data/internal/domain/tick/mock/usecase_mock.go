// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	tick "github.com/muhammadchandra19/exchange/services/market-data/internal/infrastructure/questdb/tick"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetLatestTick mocks base method.
func (m *MockUsecase) GetLatestTick(ctx context.Context, symbol string) (*tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTick", ctx, symbol)
	ret0, _ := ret[0].(*tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTick indicates an expected call of GetLatestTick.
func (mr *MockUsecaseMockRecorder) GetLatestTick(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTick", reflect.TypeOf((*MockUsecase)(nil).GetLatestTick), ctx, symbol)
}

// GetTickVolume mocks base method.
func (m *MockUsecase) GetTickVolume(ctx context.Context, symbol string, from, to time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickVolume", ctx, symbol, from, to)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickVolume indicates an expected call of GetTickVolume.
func (mr *MockUsecaseMockRecorder) GetTickVolume(ctx, symbol, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickVolume", reflect.TypeOf((*MockUsecase)(nil).GetTickVolume), ctx, symbol, from, to)
}

// GetTicks mocks base method.
func (m *MockUsecase) GetTicks(ctx context.Context, filter tick.Filter) ([]*tick.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicks", ctx, filter)
	ret0, _ := ret[0].([]*tick.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicks indicates an expected call of GetTicks.
func (mr *MockUsecaseMockRecorder) GetTicks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicks", reflect.TypeOf((*MockUsecase)(nil).GetTicks), ctx, filter)
}

// StoreTick mocks base method.
func (m *MockUsecase) StoreTick(ctx context.Context, tick *tick.Tick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTick", ctx, tick)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTick indicates an expected call of StoreTick.
func (mr *MockUsecaseMockRecorder) StoreTick(ctx, tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTick", reflect.TypeOf((*MockUsecase)(nil).StoreTick), ctx, tick)
}

// StoreTicks mocks base method.
func (m *MockUsecase) StoreTicks(ctx context.Context, ticks []*tick.Tick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTicks", ctx, ticks)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTicks indicates an expected call of StoreTicks.
func (mr *MockUsecaseMockRecorder) StoreTicks(ctx, ticks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTicks", reflect.TypeOf((*MockUsecase)(nil).StoreTicks), ctx, ticks)
}
