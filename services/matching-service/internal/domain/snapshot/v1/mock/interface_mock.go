// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package snapshotv1_mock is a generated GoMock package.
package snapshotv1_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	snapshotv1 "github.com/muhammadchandra19/exchange/services/matching-service/internal/domain/snapshot/v1"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// LoadStore mocks base method.
func (m *MockStore) LoadStore(ctx context.Context) (*snapshotv1.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStore", ctx)
	ret0, _ := ret[0].(*snapshotv1.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStore indicates an expected call of LoadStore.
func (mr *MockStoreMockRecorder) LoadStore(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStore", reflect.TypeOf((*MockStore)(nil).LoadStore), ctx)
}

// Store mocks base method.
func (m *MockStore) Store(ctx context.Context, snapshot *snapshotv1.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStoreMockRecorder) Store(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStore)(nil).Store), ctx, snapshot)
}
