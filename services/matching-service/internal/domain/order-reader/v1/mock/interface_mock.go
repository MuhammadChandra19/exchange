// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package orderreaderv1_mock is a generated GoMock package.
package orderreaderv1_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	orderbookv1 "github.com/muhammadchandra19/exchange/services/matching-service/internal/domain/orderbook/v1"
	kafka "github.com/segmentio/kafka-go"
)

// MockOrderReader is a mock of OrderReader interface.
type MockOrderReader struct {
	ctrl     *gomock.Controller
	recorder *MockOrderReaderMockRecorder
}

// MockOrderReaderMockRecorder is the mock recorder for MockOrderReader.
type MockOrderReaderMockRecorder struct {
	mock *MockOrderReader
}

// NewMockOrderReader creates a new mock instance.
func NewMockOrderReader(ctrl *gomock.Controller) *MockOrderReader {
	mock := &MockOrderReader{ctrl: ctrl}
	mock.recorder = &MockOrderReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderReader) EXPECT() *MockOrderReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOrderReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderReader)(nil).Close))
}

// CommitMessages mocks base method.
func (m *MockOrderReader) CommitMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessages indicates an expected call of CommitMessages.
func (mr *MockOrderReaderMockRecorder) CommitMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessages", reflect.TypeOf((*MockOrderReader)(nil).CommitMessages), varargs...)
}

// ReadMessage mocks base method.
func (m *MockOrderReader) ReadMessage(ctx context.Context) (kafka.Message, orderbookv1.PlaceOrderRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", ctx)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(orderbookv1.PlaceOrderRequest)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockOrderReaderMockRecorder) ReadMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockOrderReader)(nil).ReadMessage), ctx)
}

// SetOffset mocks base method.
func (m *MockOrderReader) SetOffset(offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOffset", offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOffset indicates an expected call of SetOffset.
func (mr *MockOrderReaderMockRecorder) SetOffset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOffset", reflect.TypeOf((*MockOrderReader)(nil).SetOffset), offset)
}
