// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package matchpublisherv1_mock is a generated GoMock package.
package matchpublisherv1_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafkav1 "github.com/muhammadchandra19/exchange/proto/go/kafka/v1"
)

// MockMatchPublisher is a mock of MatchPublisher interface.
type MockMatchPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMatchPublisherMockRecorder
}

// MockMatchPublisherMockRecorder is the mock recorder for MockMatchPublisher.
type MockMatchPublisherMockRecorder struct {
	mock *MockMatchPublisher
}

// NewMockMatchPublisher creates a new mock instance.
func NewMockMatchPublisher(ctrl *gomock.Controller) *MockMatchPublisher {
	mock := &MockMatchPublisher{ctrl: ctrl}
	mock.recorder = &MockMatchPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchPublisher) EXPECT() *MockMatchPublisherMockRecorder {
	return m.recorder
}

// PublishMatchEvent mocks base method.
func (m *MockMatchPublisher) PublishMatchEvent(ctx context.Context, kafkaVayload *kafkav1.MatchEventPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchEvent", ctx, kafkaVayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchEvent indicates an expected call of PublishMatchEvent.
func (mr *MockMatchPublisherMockRecorder) PublishMatchEvent(ctx, kafkaVayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchEvent", reflect.TypeOf((*MockMatchPublisher)(nil).PublishMatchEvent), ctx, kafkaVayload)
}
