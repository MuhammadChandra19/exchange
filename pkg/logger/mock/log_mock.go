// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package logger_mock is a generated GoMock package.
package logger_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/muhammadchandra19/exchange/pkg/logger"
	zap "go.uber.org/zap"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockInterface) Debug(message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockInterfaceMockRecorder) Debug(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockInterface)(nil).Debug), varargs...)
}

// DebugContext mocks base method.
func (m *MockInterface) DebugContext(ctx context.Context, message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugContext", varargs...)
}

// DebugContext indicates an expected call of DebugContext.
func (mr *MockInterfaceMockRecorder) DebugContext(ctx, message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugContext", reflect.TypeOf((*MockInterface)(nil).DebugContext), varargs...)
}

// Error mocks base method.
func (m *MockInterface) Error(err error, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockInterfaceMockRecorder) Error(err interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInterface)(nil).Error), varargs...)
}

// ErrorContext mocks base method.
func (m *MockInterface) ErrorContext(ctx context.Context, err error, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorContext", varargs...)
}

// ErrorContext indicates an expected call of ErrorContext.
func (mr *MockInterfaceMockRecorder) ErrorContext(ctx, err interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, err}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorContext", reflect.TypeOf((*MockInterface)(nil).ErrorContext), varargs...)
}

// GetZap mocks base method.
func (m *MockInterface) GetZap() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZap")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// GetZap indicates an expected call of GetZap.
func (mr *MockInterfaceMockRecorder) GetZap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZap", reflect.TypeOf((*MockInterface)(nil).GetZap))
}

// Info mocks base method.
func (m *MockInterface) Info(message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockInterfaceMockRecorder) Info(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInterface)(nil).Info), varargs...)
}

// InfoContext mocks base method.
func (m *MockInterface) InfoContext(ctx context.Context, message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoContext", varargs...)
}

// InfoContext indicates an expected call of InfoContext.
func (mr *MockInterfaceMockRecorder) InfoContext(ctx, message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoContext", reflect.TypeOf((*MockInterface)(nil).InfoContext), varargs...)
}

// Sync mocks base method.
func (m *MockInterface) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockInterfaceMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockInterface)(nil).Sync))
}

// Warn mocks base method.
func (m *MockInterface) Warn(message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockInterfaceMockRecorder) Warn(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockInterface)(nil).Warn), varargs...)
}

// WarnContext mocks base method.
func (m *MockInterface) WarnContext(ctx context.Context, message string, fields ...logger.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnContext", varargs...)
}

// WarnContext indicates an expected call of WarnContext.
func (mr *MockInterfaceMockRecorder) WarnContext(ctx, message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnContext", reflect.TypeOf((*MockInterface)(nil).WarnContext), varargs...)
}

// WithFields mocks base method.
func (m *MockInterface) WithFields(fields ...logger.Field) *logger.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithFields", varargs...)
	ret0, _ := ret[0].(*logger.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockInterfaceMockRecorder) WithFields(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockInterface)(nil).WithFields), fields...)
}
