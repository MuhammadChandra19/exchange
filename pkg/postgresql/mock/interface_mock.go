// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	postgresql "github.com/muhammadchandra19/exchange/pkg/postgresql"
)

// MockRowsInterface is a mock of RowsInterface interface.
type MockRowsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRowsInterfaceMockRecorder
}

// MockRowsInterfaceMockRecorder is the mock recorder for MockRowsInterface.
type MockRowsInterfaceMockRecorder struct {
	mock *MockRowsInterface
}

// NewMockRowsInterface creates a new mock instance.
func NewMockRowsInterface(ctrl *gomock.Controller) *MockRowsInterface {
	mock := &MockRowsInterface{ctrl: ctrl}
	mock.recorder = &MockRowsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowsInterface) EXPECT() *MockRowsInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRowsInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRowsInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsInterface)(nil).Close))
}

// Err mocks base method.
func (m *MockRowsInterface) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsInterfaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRowsInterface)(nil).Err))
}

// FieldDescriptions mocks base method.
func (m *MockRowsInterface) FieldDescriptions() []pgconn.FieldDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldDescriptions")
	ret0, _ := ret[0].([]pgconn.FieldDescription)
	return ret0
}

// FieldDescriptions indicates an expected call of FieldDescriptions.
func (mr *MockRowsInterfaceMockRecorder) FieldDescriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDescriptions", reflect.TypeOf((*MockRowsInterface)(nil).FieldDescriptions))
}

// Next mocks base method.
func (m *MockRowsInterface) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsInterfaceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsInterface)(nil).Next))
}

// Scan mocks base method.
func (m *MockRowsInterface) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsInterfaceMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowsInterface)(nil).Scan), dest...)
}

// Values mocks base method.
func (m *MockRowsInterface) Values() ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *MockRowsInterfaceMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockRowsInterface)(nil).Values))
}

// MockRowInterface is a mock of RowInterface interface.
type MockRowInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRowInterfaceMockRecorder
}

// MockRowInterfaceMockRecorder is the mock recorder for MockRowInterface.
type MockRowInterfaceMockRecorder struct {
	mock *MockRowInterface
}

// NewMockRowInterface creates a new mock instance.
func NewMockRowInterface(ctrl *gomock.Controller) *MockRowInterface {
	mock := &MockRowInterface{ctrl: ctrl}
	mock.recorder = &MockRowInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowInterface) EXPECT() *MockRowInterfaceMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRowInterface) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowInterfaceMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowInterface)(nil).Scan), dest...)
}

// MockPostgreSQLClient is a mock of PostgreSQLClient interface.
type MockPostgreSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgreSQLClientMockRecorder
}

// MockPostgreSQLClientMockRecorder is the mock recorder for MockPostgreSQLClient.
type MockPostgreSQLClientMockRecorder struct {
	mock *MockPostgreSQLClient
}

// NewMockPostgreSQLClient creates a new mock instance.
func NewMockPostgreSQLClient(ctrl *gomock.Controller) *MockPostgreSQLClient {
	mock := &MockPostgreSQLClient{ctrl: ctrl}
	mock.recorder = &MockPostgreSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgreSQLClient) EXPECT() *MockPostgreSQLClientMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockPostgreSQLClient) Acquire(ctx context.Context) (*pgxpool.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(*pgxpool.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockPostgreSQLClientMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockPostgreSQLClient)(nil).Acquire), ctx)
}

// Begin mocks base method.
func (m *MockPostgreSQLClient) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPostgreSQLClientMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPostgreSQLClient)(nil).Begin), ctx)
}

// BeginTx mocks base method.
func (m *MockPostgreSQLClient) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPostgreSQLClientMockRecorder) BeginTx(ctx, txOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPostgreSQLClient)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockPostgreSQLClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPostgreSQLClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgreSQLClient)(nil).Close))
}

// CopyFrom mocks base method.
func (m *MockPostgreSQLClient) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, columnNames, rowSrc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockPostgreSQLClientMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockPostgreSQLClient)(nil).CopyFrom), ctx, tableName, columnNames, rowSrc)
}

// DatabaseName mocks base method.
func (m *MockPostgreSQLClient) DatabaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseName indicates an expected call of DatabaseName.
func (mr *MockPostgreSQLClientMockRecorder) DatabaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseName", reflect.TypeOf((*MockPostgreSQLClient)(nil).DatabaseName))
}

// Deallocate mocks base method.
func (m *MockPostgreSQLClient) Deallocate(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockPostgreSQLClientMockRecorder) Deallocate(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockPostgreSQLClient)(nil).Deallocate), ctx, name)
}

// Exec mocks base method.
func (m *MockPostgreSQLClient) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPostgreSQLClientMockRecorder) Exec(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPostgreSQLClient)(nil).Exec), varargs...)
}

// Host mocks base method.
func (m *MockPostgreSQLClient) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockPostgreSQLClientMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockPostgreSQLClient)(nil).Host))
}

// Ping mocks base method.
func (m *MockPostgreSQLClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPostgreSQLClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPostgreSQLClient)(nil).Ping), ctx)
}

// Pool mocks base method.
func (m *MockPostgreSQLClient) Pool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockPostgreSQLClientMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockPostgreSQLClient)(nil).Pool))
}

// Port mocks base method.
func (m *MockPostgreSQLClient) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockPostgreSQLClientMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockPostgreSQLClient)(nil).Port))
}

// Prepare mocks base method.
func (m *MockPostgreSQLClient) Prepare(ctx context.Context, name, sql string) (*pgconn.StatementDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, sql)
	ret0, _ := ret[0].(*pgconn.StatementDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPostgreSQLClientMockRecorder) Prepare(ctx, name, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPostgreSQLClient)(nil).Prepare), ctx, name, sql)
}

// Query mocks base method.
func (m *MockPostgreSQLClient) Query(ctx context.Context, sql string, args ...any) (postgresql.RowsInterface, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(postgresql.RowsInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPostgreSQLClientMockRecorder) Query(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPostgreSQLClient)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPostgreSQLClient) QueryRow(ctx context.Context, sql string, args ...any) postgresql.RowInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(postgresql.RowInterface)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPostgreSQLClientMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPostgreSQLClient)(nil).QueryRow), varargs...)
}

// SendBatch mocks base method.
func (m *MockPostgreSQLClient) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, b)
	ret0, _ := ret[0].(pgx.BatchResults)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockPostgreSQLClientMockRecorder) SendBatch(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockPostgreSQLClient)(nil).SendBatch), ctx, b)
}

// Stats mocks base method.
func (m *MockPostgreSQLClient) Stats() *pgxpool.Stat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(*pgxpool.Stat)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockPostgreSQLClientMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockPostgreSQLClient)(nil).Stats))
}
