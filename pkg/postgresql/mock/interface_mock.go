// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	postgresql "github.com/muhammadchandra19/exchange/pkg/postgresql"
)

// MockRowsInterface is a mock of RowsInterface interface.
type MockRowsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRowsInterfaceMockRecorder
}

// MockRowsInterfaceMockRecorder is the mock recorder for MockRowsInterface.
type MockRowsInterfaceMockRecorder struct {
	mock *MockRowsInterface
}

// NewMockRowsInterface creates a new mock instance.
func NewMockRowsInterface(ctrl *gomock.Controller) *MockRowsInterface {
	mock := &MockRowsInterface{ctrl: ctrl}
	mock.recorder = &MockRowsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowsInterface) EXPECT() *MockRowsInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRowsInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRowsInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsInterface)(nil).Close))
}

// Err mocks base method.
func (m *MockRowsInterface) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsInterfaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRowsInterface)(nil).Err))
}

// FieldDescriptions mocks base method.
func (m *MockRowsInterface) FieldDescriptions() []pgconn.FieldDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldDescriptions")
	ret0, _ := ret[0].([]pgconn.FieldDescription)
	return ret0
}

// FieldDescriptions indicates an expected call of FieldDescriptions.
func (mr *MockRowsInterfaceMockRecorder) FieldDescriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDescriptions", reflect.TypeOf((*MockRowsInterface)(nil).FieldDescriptions))
}

// Next mocks base method.
func (m *MockRowsInterface) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsInterfaceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsInterface)(nil).Next))
}

// Scan mocks base method.
func (m *MockRowsInterface) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsInterfaceMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowsInterface)(nil).Scan), dest...)
}

// Values mocks base method.
func (m *MockRowsInterface) Values() ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *MockRowsInterfaceMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockRowsInterface)(nil).Values))
}

// MockPostgreSQLClient is a mock of PostgreSQLClient interface.
type MockPostgreSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgreSQLClientMockRecorder
}

// MockPostgreSQLClientMockRecorder is the mock recorder for MockPostgreSQLClient.
type MockPostgreSQLClientMockRecorder struct {
	mock *MockPostgreSQLClient
}

// NewMockPostgreSQLClient creates a new mock instance.
func NewMockPostgreSQLClient(ctrl *gomock.Controller) *MockPostgreSQLClient {
	mock := &MockPostgreSQLClient{ctrl: ctrl}
	mock.recorder = &MockPostgreSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgreSQLClient) EXPECT() *MockPostgreSQLClientMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockPostgreSQLClient) Acquire(ctx context.Context) (*pgxpool.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(*pgxpool.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockPostgreSQLClientMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockPostgreSQLClient)(nil).Acquire), ctx)
}

// Begin mocks base method.
func (m *MockPostgreSQLClient) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPostgreSQLClientMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPostgreSQLClient)(nil).Begin), ctx)
}

// BeginTx mocks base method.
func (m *MockPostgreSQLClient) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPostgreSQLClientMockRecorder) BeginTx(ctx, txOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPostgreSQLClient)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockPostgreSQLClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPostgreSQLClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgreSQLClient)(nil).Close))
}

// CopyFrom mocks base method.
func (m *MockPostgreSQLClient) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, columnNames, rowSrc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockPostgreSQLClientMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockPostgreSQLClient)(nil).CopyFrom), ctx, tableName, columnNames, rowSrc)
}

// DatabaseName mocks base method.
func (m *MockPostgreSQLClient) DatabaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseName indicates an expected call of DatabaseName.
func (mr *MockPostgreSQLClientMockRecorder) DatabaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseName", reflect.TypeOf((*MockPostgreSQLClient)(nil).DatabaseName))
}

// Deallocate mocks base method.
func (m *MockPostgreSQLClient) Deallocate(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockPostgreSQLClientMockRecorder) Deallocate(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockPostgreSQLClient)(nil).Deallocate), ctx, name)
}

// Exec mocks base method.
func (m *MockPostgreSQLClient) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPostgreSQLClientMockRecorder) Exec(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPostgreSQLClient)(nil).Exec), varargs...)
}

// Host mocks base method.
func (m *MockPostgreSQLClient) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockPostgreSQLClientMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockPostgreSQLClient)(nil).Host))
}

// Ping mocks base method.
func (m *MockPostgreSQLClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPostgreSQLClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPostgreSQLClient)(nil).Ping), ctx)
}

// Pool mocks base method.
func (m *MockPostgreSQLClient) Pool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockPostgreSQLClientMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockPostgreSQLClient)(nil).Pool))
}

// Port mocks base method.
func (m *MockPostgreSQLClient) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockPostgreSQLClientMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockPostgreSQLClient)(nil).Port))
}

// Prepare mocks base method.
func (m *MockPostgreSQLClient) Prepare(ctx context.Context, name, sql string) (*pgconn.StatementDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, sql)
	ret0, _ := ret[0].(*pgconn.StatementDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPostgreSQLClientMockRecorder) Prepare(ctx, name, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPostgreSQLClient)(nil).Prepare), ctx, name, sql)
}

// Query mocks base method.
func (m *MockPostgreSQLClient) Query(ctx context.Context, sql string, args ...any) (postgresql.RowsInterface, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(postgresql.RowsInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPostgreSQLClientMockRecorder) Query(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPostgreSQLClient)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPostgreSQLClient) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPostgreSQLClientMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPostgreSQLClient)(nil).QueryRow), varargs...)
}

// SendBatch mocks base method.
func (m *MockPostgreSQLClient) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, b)
	ret0, _ := ret[0].(pgx.BatchResults)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockPostgreSQLClientMockRecorder) SendBatch(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockPostgreSQLClient)(nil).SendBatch), ctx, b)
}

// Stats mocks base method.
func (m *MockPostgreSQLClient) Stats() *pgxpool.Stat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(*pgxpool.Stat)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockPostgreSQLClientMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockPostgreSQLClient)(nil).Stats))
}

// MockQueryBuilder is a mock of QueryBuilder interface.
type MockQueryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockQueryBuilderMockRecorder
}

// MockQueryBuilderMockRecorder is the mock recorder for MockQueryBuilder.
type MockQueryBuilderMockRecorder struct {
	mock *MockQueryBuilder
}

// NewMockQueryBuilder creates a new mock instance.
func NewMockQueryBuilder(ctrl *gomock.Controller) *MockQueryBuilder {
	mock := &MockQueryBuilder{ctrl: ctrl}
	mock.recorder = &MockQueryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryBuilder) EXPECT() *MockQueryBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockQueryBuilder) Build() (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockQueryBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockQueryBuilder)(nil).Build))
}

// From mocks base method.
func (m *MockQueryBuilder) From(table string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From", table)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockQueryBuilderMockRecorder) From(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockQueryBuilder)(nil).From), table)
}

// GroupBy mocks base method.
func (m *MockQueryBuilder) GroupBy(columns ...string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupBy", varargs...)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// GroupBy indicates an expected call of GroupBy.
func (mr *MockQueryBuilderMockRecorder) GroupBy(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBy", reflect.TypeOf((*MockQueryBuilder)(nil).GroupBy), columns...)
}

// Having mocks base method.
func (m *MockQueryBuilder) Having(condition string, args ...any) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockQueryBuilderMockRecorder) Having(condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockQueryBuilder)(nil).Having), varargs...)
}

// Join mocks base method.
func (m *MockQueryBuilder) Join(table, condition string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", table, condition)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockQueryBuilderMockRecorder) Join(table, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockQueryBuilder)(nil).Join), table, condition)
}

// LeftJoin mocks base method.
func (m *MockQueryBuilder) LeftJoin(table, condition string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeftJoin", table, condition)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// LeftJoin indicates an expected call of LeftJoin.
func (mr *MockQueryBuilderMockRecorder) LeftJoin(table, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeftJoin", reflect.TypeOf((*MockQueryBuilder)(nil).LeftJoin), table, condition)
}

// Limit mocks base method.
func (m *MockQueryBuilder) Limit(limit int) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockQueryBuilderMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQueryBuilder)(nil).Limit), limit)
}

// Offset mocks base method.
func (m *MockQueryBuilder) Offset(offset int) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockQueryBuilderMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockQueryBuilder)(nil).Offset), offset)
}

// OrderBy mocks base method.
func (m *MockQueryBuilder) OrderBy(column string, desc ...bool) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{column}
	for _, a := range desc {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockQueryBuilderMockRecorder) OrderBy(column interface{}, desc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column}, desc...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockQueryBuilder)(nil).OrderBy), varargs...)
}

// Reset mocks base method.
func (m *MockQueryBuilder) Reset() postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockQueryBuilderMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockQueryBuilder)(nil).Reset))
}

// RightJoin mocks base method.
func (m *MockQueryBuilder) RightJoin(table, condition string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RightJoin", table, condition)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// RightJoin indicates an expected call of RightJoin.
func (mr *MockQueryBuilderMockRecorder) RightJoin(table, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RightJoin", reflect.TypeOf((*MockQueryBuilder)(nil).RightJoin), table, condition)
}

// Select mocks base method.
func (m *MockQueryBuilder) Select(columns ...string) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockQueryBuilderMockRecorder) Select(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQueryBuilder)(nil).Select), columns...)
}

// Where mocks base method.
func (m *MockQueryBuilder) Where(condition string, args ...any) postgresql.QueryBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(postgresql.QueryBuilder)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockQueryBuilderMockRecorder) Where(condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockQueryBuilder)(nil).Where), varargs...)
}

// MockInsertBuilder is a mock of InsertBuilder interface.
type MockInsertBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockInsertBuilderMockRecorder
}

// MockInsertBuilderMockRecorder is the mock recorder for MockInsertBuilder.
type MockInsertBuilderMockRecorder struct {
	mock *MockInsertBuilder
}

// NewMockInsertBuilder creates a new mock instance.
func NewMockInsertBuilder(ctrl *gomock.Controller) *MockInsertBuilder {
	mock := &MockInsertBuilder{ctrl: ctrl}
	mock.recorder = &MockInsertBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertBuilder) EXPECT() *MockInsertBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockInsertBuilder) Build() (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockInsertBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockInsertBuilder)(nil).Build))
}

// Columns mocks base method.
func (m *MockInsertBuilder) Columns(columns ...string) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Columns", varargs...)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// Columns indicates an expected call of Columns.
func (mr *MockInsertBuilderMockRecorder) Columns(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockInsertBuilder)(nil).Columns), columns...)
}

// Into mocks base method.
func (m *MockInsertBuilder) Into(table string) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Into", table)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// Into indicates an expected call of Into.
func (mr *MockInsertBuilderMockRecorder) Into(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Into", reflect.TypeOf((*MockInsertBuilder)(nil).Into), table)
}

// OnConflict mocks base method.
func (m *MockInsertBuilder) OnConflict(constraint string) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConflict", constraint)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// OnConflict indicates an expected call of OnConflict.
func (mr *MockInsertBuilderMockRecorder) OnConflict(constraint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConflict", reflect.TypeOf((*MockInsertBuilder)(nil).OnConflict), constraint)
}

// OnConflictDoNothing mocks base method.
func (m *MockInsertBuilder) OnConflictDoNothing() postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConflictDoNothing")
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// OnConflictDoNothing indicates an expected call of OnConflictDoNothing.
func (mr *MockInsertBuilderMockRecorder) OnConflictDoNothing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConflictDoNothing", reflect.TypeOf((*MockInsertBuilder)(nil).OnConflictDoNothing))
}

// OnConflictDoUpdate mocks base method.
func (m *MockInsertBuilder) OnConflictDoUpdate(setClause string, args ...any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{setClause}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnConflictDoUpdate", varargs...)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// OnConflictDoUpdate indicates an expected call of OnConflictDoUpdate.
func (mr *MockInsertBuilderMockRecorder) OnConflictDoUpdate(setClause interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{setClause}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConflictDoUpdate", reflect.TypeOf((*MockInsertBuilder)(nil).OnConflictDoUpdate), varargs...)
}

// Reset mocks base method.
func (m *MockInsertBuilder) Reset() postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockInsertBuilderMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockInsertBuilder)(nil).Reset))
}

// Returning mocks base method.
func (m *MockInsertBuilder) Returning(columns ...string) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockInsertBuilderMockRecorder) Returning(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockInsertBuilder)(nil).Returning), columns...)
}

// Values mocks base method.
func (m *MockInsertBuilder) Values(values ...any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Values", varargs...)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockInsertBuilderMockRecorder) Values(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockInsertBuilder)(nil).Values), values...)
}

// ValuesFromStruct mocks base method.
func (m *MockInsertBuilder) ValuesFromStruct(structs any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesFromStruct", structs)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// ValuesFromStruct indicates an expected call of ValuesFromStruct.
func (mr *MockInsertBuilderMockRecorder) ValuesFromStruct(structs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesFromStruct", reflect.TypeOf((*MockInsertBuilder)(nil).ValuesFromStruct), structs)
}

// ValuesMap mocks base method.
func (m *MockInsertBuilder) ValuesMap(valueMap map[string]any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesMap", valueMap)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// ValuesMap indicates an expected call of ValuesMap.
func (mr *MockInsertBuilderMockRecorder) ValuesMap(valueMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesMap", reflect.TypeOf((*MockInsertBuilder)(nil).ValuesMap), valueMap)
}

// ValuesMaps mocks base method.
func (m *MockInsertBuilder) ValuesMaps(valueMaps []map[string]any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesMaps", valueMaps)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// ValuesMaps indicates an expected call of ValuesMaps.
func (mr *MockInsertBuilderMockRecorder) ValuesMaps(valueMaps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesMaps", reflect.TypeOf((*MockInsertBuilder)(nil).ValuesMaps), valueMaps)
}

// ValuesSlice mocks base method.
func (m *MockInsertBuilder) ValuesSlice(valuesSlice [][]any) postgresql.InsertBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesSlice", valuesSlice)
	ret0, _ := ret[0].(postgresql.InsertBuilder)
	return ret0
}

// ValuesSlice indicates an expected call of ValuesSlice.
func (mr *MockInsertBuilderMockRecorder) ValuesSlice(valuesSlice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesSlice", reflect.TypeOf((*MockInsertBuilder)(nil).ValuesSlice), valuesSlice)
}

// MockUpdateBuilder is a mock of UpdateBuilder interface.
type MockUpdateBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateBuilderMockRecorder
}

// MockUpdateBuilderMockRecorder is the mock recorder for MockUpdateBuilder.
type MockUpdateBuilderMockRecorder struct {
	mock *MockUpdateBuilder
}

// NewMockUpdateBuilder creates a new mock instance.
func NewMockUpdateBuilder(ctrl *gomock.Controller) *MockUpdateBuilder {
	mock := &MockUpdateBuilder{ctrl: ctrl}
	mock.recorder = &MockUpdateBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateBuilder) EXPECT() *MockUpdateBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockUpdateBuilder) Build() (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockUpdateBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockUpdateBuilder)(nil).Build))
}

// Reset mocks base method.
func (m *MockUpdateBuilder) Reset() postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockUpdateBuilderMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUpdateBuilder)(nil).Reset))
}

// Returning mocks base method.
func (m *MockUpdateBuilder) Returning(columns ...string) postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockUpdateBuilderMockRecorder) Returning(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockUpdateBuilder)(nil).Returning), columns...)
}

// Set mocks base method.
func (m *MockUpdateBuilder) Set(column string, value any) postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", column, value)
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUpdateBuilderMockRecorder) Set(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUpdateBuilder)(nil).Set), column, value)
}

// SetMap mocks base method.
func (m *MockUpdateBuilder) SetMap(updates map[string]any) postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMap", updates)
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// SetMap indicates an expected call of SetMap.
func (mr *MockUpdateBuilderMockRecorder) SetMap(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMap", reflect.TypeOf((*MockUpdateBuilder)(nil).SetMap), updates)
}

// Table mocks base method.
func (m *MockUpdateBuilder) Table(table string) postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", table)
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockUpdateBuilderMockRecorder) Table(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockUpdateBuilder)(nil).Table), table)
}

// Where mocks base method.
func (m *MockUpdateBuilder) Where(condition string, args ...any) postgresql.UpdateBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(postgresql.UpdateBuilder)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockUpdateBuilderMockRecorder) Where(condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUpdateBuilder)(nil).Where), varargs...)
}

// MockDeleteBuilder is a mock of DeleteBuilder interface.
type MockDeleteBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteBuilderMockRecorder
}

// MockDeleteBuilderMockRecorder is the mock recorder for MockDeleteBuilder.
type MockDeleteBuilderMockRecorder struct {
	mock *MockDeleteBuilder
}

// NewMockDeleteBuilder creates a new mock instance.
func NewMockDeleteBuilder(ctrl *gomock.Controller) *MockDeleteBuilder {
	mock := &MockDeleteBuilder{ctrl: ctrl}
	mock.recorder = &MockDeleteBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteBuilder) EXPECT() *MockDeleteBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDeleteBuilder) Build() (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockDeleteBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDeleteBuilder)(nil).Build))
}

// From mocks base method.
func (m *MockDeleteBuilder) From(table string) postgresql.DeleteBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From", table)
	ret0, _ := ret[0].(postgresql.DeleteBuilder)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockDeleteBuilderMockRecorder) From(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockDeleteBuilder)(nil).From), table)
}

// Reset mocks base method.
func (m *MockDeleteBuilder) Reset() postgresql.DeleteBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(postgresql.DeleteBuilder)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockDeleteBuilderMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockDeleteBuilder)(nil).Reset))
}

// Returning mocks base method.
func (m *MockDeleteBuilder) Returning(columns ...string) postgresql.DeleteBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(postgresql.DeleteBuilder)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockDeleteBuilderMockRecorder) Returning(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockDeleteBuilder)(nil).Returning), columns...)
}

// Where mocks base method.
func (m *MockDeleteBuilder) Where(condition string, args ...any) postgresql.DeleteBuilder {
	m.ctrl.T.Helper()
	varargs := []interface{}{condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(postgresql.DeleteBuilder)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDeleteBuilderMockRecorder) Where(condition interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDeleteBuilder)(nil).Where), varargs...)
}
